import "./App.css";
import Display from "./plane/display";
import { useEffect, useRef, useState } from "react";
import ToastifyBody, { toastError, toastInfo, toastInfoLong, toastSuccess, toastWarning } from "./compoents/toastCore";
import { bodyGenrate, checkBody, createBodyBot, createBodyLeft, createBodyRight, createBodyTop, getRandomInteger } from "./utils/functions";
import "react-toastify/dist/ReactToastify.css";

function App() {
  const [pcBodys, setPcBodys] = useState([]);
  const [humanBodys, setHumanBodys] = useState([]);
  const [active, setActive] = useState(true);
  const [humanPoint, setHumanPoint] = useState({ —à–∞—Ä—Ö: 0, —Å”©–Ω—Å”©–Ω: 0 });
  const [pcPoint, setPcPoint] = useState({ —à–∞—Ä—Ö: 0, —Å”©–Ω—Å”©–Ω: 0 });
  const [gameStatus, setGameStatus] = useState(false);
  const [tempHead, setTempHead] = useState();
  const [shootData, setShootData] = useState([]);

  const humanMapRemote = useRef();

  useEffect(() => {
    setPcBodys(bodyGenrate());
  }, []);

  useEffect(() => {
    function keyPress(e) {
      let bodyTemp;
      if (e.key === "w") {
        bodyTemp = createBodyTop(tempHead);
      } else if (e.key === "s") {
        bodyTemp = createBodyBot(tempHead);
      } else if (e.key === "a") {
        bodyTemp = createBodyLeft(tempHead);
      } else if (e.key === "d") {
        bodyTemp = createBodyRight(tempHead);
      } else if (e.key === "x") {
        setHumanBodys([...humanBodys]);
        setTempHead();
      } else {
        toastWarning("–¢–∞ –±—É—Ä—É—É —Ç–æ–≤—á –¥–∞—Ä—Å–∞–Ω –±–∞–π–Ω–∞ ^_-");
      }
      if (bodyTemp) {
        if (checkBody(humanBodys, bodyTemp)) {
          setHumanBodys([...humanBodys, bodyTemp]);
          setTempHead();
          toastInfo("–ê–º–∂–∏–ª—Ç—Ç–∞–π");
        } else toastWarning("–≠–Ω—ç –æ–Ω–≥–æ—Ü—ã –∑—É—Ä–∞–≥–¥–∞–ª—Ç –±—É—Ä—É—É –±–∞–π–Ω–∞");
      }
    }

    if (tempHead) {
      window.addEventListener("keypress", keyPress);
    }
    return () => window.removeEventListener("keypress", keyPress);
  }, [tempHead, humanBodys]);

  useEffect(() => {
    if (active && humanBodys.length > 2) {
      let data;
      setTimeout(() => {
        data = randomShoot(shootData);
        humanMapRemote.current?.shoot(data[0], data[1]);
      }, 1000);
    }
    // eslint-disable-next-line
  }, [active, humanBodys]);

  useEffect(() => {
    // eslint-disable-next-line
    setGameStatus(gameIsDone());
    // eslint-disable-next-line
  });

  return (
    <>
      <h1>–û–Ω–≥–æ—Ü –±—É—É–¥–¥–∞–≥ —Ç–æ–≥–ª–æ–æ–º</h1>
      <div
        className="container"
        onKeyDown={(e) => {
          console.log("hha");
          console.log(e.code);
        }}>
        <div aria-disabled={true} className={"app " + (pcPoint.—Å”©–Ω—Å”©–Ω === 3 ? "winner" : "") + (humanPoint.—Å”©–Ω—Å”©–Ω === 3 ? "loser" : "")} key="user">
          <h1>–¢–æ–≥–ª–æ–≥—á</h1>
          <Display
            active={active}
            isAuto
            onShoot={(index, index2) => {
              if (humanBodys.length < 3) {
                if (!tempHead) setTempHead([index2, index]);
                else {
                  toastInfo('–ë–∏–µ –±–∞–π—Ä—à—É—É–ª–∞–ª—Ç–∞–∞ –¥—É—É—Å–≥–∞–Ω–∞ —É—É. –•—ç—Ä—ç–≤ —à–∏–Ω—ç —Ç–æ–≥–ª–æ–π –∑—É—Ä–∞—Ö –±–æ–ª "—Ö" —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–Ω–∞ —É—É.');
                }
              } else setActive(!active);
            }}
            creatingPlane={false}
            bodys={humanBodys}
            setPoint={setPcPoint}
            win={gameStatus}
            show={humanBodys.length < 3}
            customRef={humanMapRemote}
          />
          <h4>–®–∞—Ä—Ö: {pcPoint.—à–∞—Ä—Ö}</h4>
          <h4>–°”©–Ω—Å”©–Ω: {pcPoint.—Å”©–Ω—Å”©–Ω}</h4>
        </div>
        <div aria-disabled={true} className={"app " + (humanPoint.—Å”©–Ω—Å”©–Ω === 3 ? "winner" : "") + (pcPoint.—Å”©–Ω—Å”©–Ω === 3 ? "loser" : "")} key="pc">
          <h1>–ê–π–º–∞–∞—Ä –º–∞—à–∏–Ω</h1>
          <Display active={!active} bodys={pcBodys} onShoot={() => setActive(!active)} setPoint={setHumanPoint} win={gameStatus} />
          <h4>–®–∞—Ä—Ö: {humanPoint.—à–∞—Ä—Ö}</h4>
          <h4>–°”©–Ω—Å”©–Ω: {humanPoint.—Å”©–Ω—Å”©–Ω}</h4>
        </div>
        <button onClick={restart}>–ù–∞—Ö–∏–π</button>
      </div>
      <ToastifyBody />
    </>
  );

  function restart() {
    setPcBodys(bodyGenrate());
    setHumanBodys([]);
    setHumanPoint({ —à–∞—Ä—Ö: 0, —Å”©–Ω—Å”©–Ω: 0 });
    setPcPoint({ —à–∞—Ä—Ö: 0, —Å”©–Ω—Å”©–Ω: 0 });
    setShootData([]);
    setActive(true);
  }

  function gameIsDone() {
    let result = pcPoint.—Å”©–Ω—Å”©–Ω === 3 ? -1 : humanPoint.—Å”©–Ω—Å”©–Ω === 3 ? 1 : 0;
    if (result === 1) {
      toastSuccess("–ë–∞—è—Ä —Ö“Ø—Ä–≥—ç–µ —Ç–∞ —è–ª–ª–∞–∞");
      toastInfoLong(
        "–ú–∞—à–∏–Ω: –•—ç–¥–∏–π–≥—ç—ç—Ä –±–∏ –æ–¥–æ–æ—Ö–æ–Ω–¥–æ–æ –æ–Ω–æ–≤—á–≥“Ø–π –±–∞–π–≥–∞–∞ —á –≥—ç—Å—ç–Ω Artificial Intelligence –∏–π–Ω –∞—á–∞–∞—Ä –º—ç–¥—ç—ç–ª—ç–ª —Ü—É–≥–ª—É—É–ª–∞–Ω —è–ª–∞—Ö –º–∞–≥–∞–¥–ª–∞–ª–∞–∞ –∏–ª“Ø“Ø —Å–∞–π–∂—Ä—É—É–ª–∞—Ö –±–æ–ª–Ω–æ."
      );
    } else if (result === -1) {
      toastError("–¢–∞ –∞–π–º–∞–∞—Ä –º–∞—à–∏–Ω–¥ —è–ª–∞–≥–¥–ª–∞–∞ —Ç–∞–Ω—å–¥ –±–∞—è—Ä —Ö“Ø—Ä–≥—ç–µ üòÇüòÇü§£");
    }
    return pcPoint.—Å”©–Ω—Å”©–Ω === 3 ? -1 : humanPoint.—Å”©–Ω—Å”©–Ω === 3 ? 1 : 0;
  }

  function randomShoot(shootData = [[]]) {
    let shoot;
    let check;
    while (!check) {
      check = true;
      shoot = [getRandomInteger(0, 9), getRandomInteger(0, 9)];
      shootData.forEach((item) => {
        if (check) {
          if (item[0] === shoot[0] && item[1] === shoot[1]) check = false;
        }
      });
    }
    setShootData([...shootData, shoot]);
    return shoot;
  }
}

export default App;
